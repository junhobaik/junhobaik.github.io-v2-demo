{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/react-16-error-handling/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.White","author":"Junho Baik"}},"markdownRemark":{"id":"7681c16f-9511-5f39-9aaf-19373975b714","html":"<p>리액트 16 에서는 LifeCycle에 많은 변화가 있었고 17에서는 더 많은 변화가 있을 것이라고 예고했다.</p>\n<p>이번에 새로 등장한 <code class=\"language-text\">componentDidCatch(error, info)</code> 라이프사이클 메소드를 이용해 에러를 관리하는 방법을 살펴보자.</p>\n<h2>기본적인 사용법</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BoundaryError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token constant\">ERROR</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>BoundaryError<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Component1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BoundaryError<span class=\"token operator\">></span></code></pre>\n      </div>\n<p>위의 코드를 살펴보면 <code class=\"language-text\">componentDidCatch</code>에서 에러를 잡아 <code class=\"language-text\">setState</code>로 <code class=\"language-text\">hasError</code>값을 바꿔 에러 상태값을 관리하고<br>\n그 상태값에 따라 리턴을 달리해 에러시에는 에러 문구로 에러가 난 컴포넌트를 대신하게 된다.</p>\n<p>이렇게 하면 에러가 발생함에 따라 리액트 페이지 전체가 먹통이 되는 현상을 방지 할 수 있다.</p>\n<h2>HOC와 함께 사용하기</h2>\n<p>HOC는 Higher-Order Components로 간단히 설명하면 컴포넌트를 감싸는 컴포넌트라고 할 수 있다.</p>\n<p>HOC에 대한 자세한 설명은 생략하고 Error Handling을 하는데 어떻게 사용하는지를 살펴보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withErrorBoundary</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">WrappedComponent</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Sorry...\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>위와 같이 클래스를 만드는 함수로 <code class=\"language-text\">withErrorBoundary</code>를 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Component1WithErrorBoundary <span class=\"token operator\">=</span> <span class=\"token function\">withErrorBoundary</span><span class=\"token punctuation\">(</span>Component1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Component2WithErrorBoundary <span class=\"token operator\">=</span> <span class=\"token function\">withErrorBoundary</span><span class=\"token punctuation\">(</span>Component2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Component3WithErrorBoundary <span class=\"token operator\">=</span> <span class=\"token function\">withErrorBoundary</span><span class=\"token punctuation\">(</span>Component3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    \t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        \t<span class=\"token operator\">&lt;</span>Component1WithErrorBoundary <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    \t    <span class=\"token operator\">&lt;</span>Component2WithErrorBoundary <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t        <span class=\"token operator\">&lt;</span>Component3WithErrorBoundary <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>이제 위와 같이 사용할 수 있는데 이렇게 되면 에러가 난 컴포넌트만 해당 컴포넌트가 아닌 'Sorry…' 문구가 출력되게 될 것이며, 에러로 인해 리액트 페이지 전체가 먹통이 되는 현상을 방지 할 수 있다.</p>\n<hr>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">React Documents</a></li>\n<li><a href=\"academy.nomadcoders.co\">Nomad Coders</a> - React 16 마스터하기</li>\n</ul>","excerpt":"리액트 16 에서는 LifeCycle에 많은 변화가 있었고 1…","frontmatter":{"title":"react 16, Error handling with HOC","date":"2018-10-31","tags":["react"],"keywords":["react 에러","react error boundries","react error handling","react hoc","Higher Order Components"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-16-error-handling/","previous":{"fields":{"slug":"/react-16-portals/"},"frontmatter":{"title":"react 16, Portals","tags":["react"],"published":true}},"next":{"fields":{"slug":"/react-16-setstate-null/"},"frontmatter":{"title":"React 16, Returning null from setState","tags":["react"],"published":true}}}}}