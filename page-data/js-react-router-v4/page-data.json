{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/js-react-router-v4/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.White","author":"Junho Baik"}},"markdownRemark":{"id":"6e3c5dd4-bfcd-520b-a51d-3a3ba0266dc7","html":"<p>SPA(Single page application) 에서는 새로운 페이지 전체를 렌더링하지 않고, 부분적인 UI를 새로 렌더링한다.\n따라서 브라우저는 이 정보에 대한 이력을 남기지 않는다.\n결국 ''뒤로가기/앞으로가기''를 사용할 수 없다는 이야기이며,\n이는 사용자에게 당연시 되는 기능이므로 안된다면 많은 불편을 야기할 수 있다.\n그를 해결하기 위한 방법으로 React-router 라이브러리를 사용하게 된다.</p>\n<h2>install</h2>\n<p><code class=\"language-text\">npm install --save-dev react-router-dom</code></p>\n<p>기존 v3 에서는 react-router 만 설치해서 사용하면 됐었다.\nv4에서는 브라우저와 react에서 사용되는 라우터가 분리되어 사용하도록 되어있다.\nReact-router-dom을 설치하면 react-router도 같이 설치된다.</p>\n<h2>Use</h2>\n<h3>Basic</h3>\n<p>상단의 헤더, 그 아래 컨텐츠가 나타나는 기본 구조.</p>\n<ul>\n<li>src/App.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">//..\nimport {BrowserRouter as Router, Route} from &#39;react-router-dom&#39;;\n\nimport Main from &#39;./routes/Main&#39;;\nimport User from &#39;./routes/User&#39;;\nimport Header from &#39;./components/Header&#39;;\nimport Posts from &#39;./routes/Posts&#39;;\n\nclass App extends Component {\n  render() {\n    return (\n      &lt;Router&gt;\n        &lt;div&gt;\n          &lt;Header/&gt;\n          &lt;Route exact path=&quot;/&quot; component={Main}/&gt;\n          &lt;Route path=&quot;/user&quot; component={User}/&gt;\n          &lt;Route path=&quot;/posts&quot; component={Posts}\n          {/* exact 키워드가 없으면 /user 경로에서 /도 있는 것으로 인식, \n          Main과 User가 동시 출력 된다.*/}\n        &lt;/div&gt;\n      &lt;/Router&gt;\n    );\n  }\n}</code></pre>\n      </div>\n<ul>\n<li>src/components/Header.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">//..\n  return (\n    &lt;div&gt;\n    \t&lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;\n      \t&lt;Link to=&quot;/User&quot;&gt;User&lt;/Link&gt;\n    &lt;/div&gt;\n  );</code></pre>\n      </div>\n<hr>\n<h3>URL Parameter</h3>\n<ul>\n<li>src/App.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">//..\n&lt;Route path=&quot;/user/:username&quot; component={User}/&gt;\n//..</code></pre>\n      </div>\n<ul>\n<li>src/routes/User.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">//..\nconst User = ({match}) =&gt; {\n  return (\n  \t&lt;div&gt; UserName is {match.params.username} &lt;/div&gt;\n  );\n}</code></pre>\n      </div>\n<p><code class=\"language-text\">…/user/baik</code> URL로 접속하면 UserName is baik 라는 것을 확인 할 수 있다.</p>\n<hr>\n<h3>Route in Component</h3>\n<ul>\n<li>src/routes/Posts.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">//..\n\nimport { Route, Link } from &#39;react-router-dom&#39;;\n\nconst Post = ({match}) =&gt; {\n  return (\n\t&lt;div&gt;\n    \t&lt;h2&gt;{match.params.title}&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n}\n\nconst Posts = () =&gt; {\n  return (\n  \t&lt;div&gt;\n    \t&lt;h1&gt;Post&lt;/h1&gt;\n      \t&lt;Link to=&quot;/posts/react&quot;&gt;React&lt;/Link&gt;\n      \t&lt;Link to=&quot;/posts/redux&quot;&gt;Redux&lt;/Link&gt;\n      \t&lt;Route\n          \tpath=&quot;/posts/:title&quot;\n          \tcomponent={Post}\n          /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexports default Posts;</code></pre>\n      </div>\n<hr>\n<h3>NavLink</h3>\n<ul>\n<li>src/components/Header.css</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.item.active</span> <span class=\"token punctuation\">{</span>\n  \n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<ul>\n<li>src/components/Header.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">// &lt;Link to ...&gt;&lt;/Link&gt; =&gt; &lt;NavLink to...&gt;&lt;/NavLink&gt;\n\n&lt;NavLink exact to=&quot;/&quot; className=&quot;item&quot; activeClassName=&quot;active&quot;&gt;Home&lt;/NavLink&gt;\n\n{/* exact를 줘야 효과가 지난후에도 남아있지 않고 정확히 일치할때만 효과 적용 가능*/}</code></pre>\n      </div>\n<hr>\n<h3>Redirect</h3>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">import { Redirect } from &#39;react-router-dom&#39;;\n\nconst isLogin = false\n\n//..\nreturn (\n  &lt;div&gt;\t\n\t{!isLogin &amp;&amp; &lt;Redirect to=&quot;/login&quot;/&gt;}\n    MyPage\n  &lt;/div&gt;\n);</code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">const Main = ({history}) =&gt; {\n  return (\n  \t&lt;div&gt;\n    \t&lt;button onClick={()=&gt;{history.push(&#39;/posts&#39;)}}&gt;포스트로 이동&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n      </div>\n<hr>\n<h3>Query Parameter</h3>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">//..\nconst Main = ({location}) =&gt; {\n  return (\n      &lt;div&gt;\n          {new URLSearchParams(location.search).get(&#39;keyword&#39;)} 검색\n      &lt;/div&gt;\n  );\n}</code></pre>\n      </div>\n<hr>\n<h3>Make NotFound Page</h3>\n<ul>\n<li>src/App.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">//..\nimport {BrowserRouter as Router, Route, Switch} from &#39;react-router-dom&#39;;\n\n//..\nimport notFound from &#39;./routes/notFound&#39;;\n\nclass App extends Component {\n  render() {\n    return (\n      &lt;Router&gt;\n        &lt;div&gt;\n          &lt;Header/&gt;\n          \t&lt;div&gt;\n              &lt;Switch&gt;\n                &lt;Route exact path=&quot;/&quot; component={Main}/&gt;\n                &lt;Route path=&quot;/user&quot; component={User}/&gt;\n                &lt;Route path=&quot;/posts&quot; component={Posts}/&gt;\n                &lt;Route component={notFound}/&gt;\n              &lt;/Switch&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/Router&gt;\n    );\n  }\n}</code></pre>\n      </div>\n<p>Switch를 추가한다.</p>\n<p>기존 Switch가 없고, exact 조차 없을때는 Route 전체를 하나하나 비교해서 출력하나</p>\n<p>Switch가 있으면 일치하는 것이 있으면 비교를 그만둔다, 끝까지 일치하는 것이 없으면 notFound 컴포넌트를 보여주게 된다.</p>\n<hr>\n<h2>Reference</h2>\n<ul>\n<li>CodeSquad</li>\n<li><a href=\"https://velopert.com/3275\">https://velopert.com/3275</a></li>\n</ul>","excerpt":"SPA(Single page application) 에서는 새로운 페이지 전체를 렌더링하지 않고, 부분적인 UI…","frontmatter":{"title":"리액트 라우터 V4 사용하기 (React-Router v4)","date":"2017-06-06","tags":["react"],"keywords":["Dev.White"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/js-react-router-v4/","previous":{"fields":{"slug":"/js-this/"},"frontmatter":{"title":"자바스크립트 this","tags":["javascript"],"published":true}},"next":{"fields":{"slug":"/js-scope/"},"frontmatter":{"title":"자바스크립트의 스코프(Scope)","tags":["javascript"],"published":true}}}}}