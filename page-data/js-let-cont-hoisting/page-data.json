{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/js-let-cont-hoisting/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.White","author":"Junho Baik"}},"markdownRemark":{"id":"27ecb556-3ac9-56c7-a17a-1afa420bed0b","html":"<p>Javascript Hoisting에 대해 다시 살펴보던 도중, 예전에 공부할땐 var를 대상으로 공부했으니 깨닫지 못했는데 이번에 let, const를 가지고 해보니...<br>\n호이스팅이 되지 않았다. (정확히 말하면 호이스팅이 되지 않는 것은 아니다.)</p>\n<p>그래서 이제 어떻게 된건지 알아보자. (Hoisting의 개념과 Block-Scope 개념을 기본적으로 알고 있어야 이해가 가능하다.)</p>\n<h2>기존의 Hoisting</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>호이스팅 후 =></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefinded</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>호이스팅이 적용된 코드는 위와 같고 따라서 undefinded가 출력된다.</p>\n<h2>let, const의 Hoisting</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>이렇게 let으로 바꾼다면 결과는</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\"language-shell\"><code class=\"language-shell\">Uncaught ReferenceError: a is not defined</code></pre>\n      </div>\n<p>위와 같은 a가 정의되지 않았다는 레퍼런스 에러가 발생한다,<br>\n결국 a 변수 선언이 위로 호이스팅되지 않았다는 이야기가 된다.</p>\n<p>하지만 그렇지 않다.\n아래 예제를 보면 호이스팅이 안되는게 아니라는 것을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>위 예제는 당연하게도 <code class=\"language-text\">10</code>이 출력된다.\n이제 아래 예제를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>호이스팅이 되지 않는다면 위 코드 그대로 실행되어 10이 출력되는 것이 정상일 것이다.<br>\n그러나 여기서는 아래와 같이 에러가 출력된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\"language-shell\"><code class=\"language-shell\">Uncaught ReferenceError: a is not defined</code></pre>\n      </div>\n<p>결국 let, const와 같이 ES6 선언도 호이스팅의 대상이기 때문에 위에서는 두번째 let의 블록 스코프안에서 호이스팅이 이뤄서 console.log에서 에러가 발생하게 된 것이다.</p>\n<p>그렇다면 이러한 에러가 발생하는 이유는 무엇일까,</p>\n<p>우선 var 키워드의 경우를 살펴보자,  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>var로 선언된 변수는<br>\n[선언 - 초기화 - 할당] 의 단계 중<br>\n[선언 - 초기화]가 한번에 이루어지고 다음에 [할당]이 되게 된다.</p>\n<ol>\n<li>[선언 - 초기화]</li>\n<li>[할당]</li>\n</ol>\n<p>그에 반해 let/const 키워드는 다르게 실행된다.<br>\n선언, 초기화, 할당이 따로 이루어지고 <strong>TDZ(Temporal Dead Zone)</strong>라는 것이 개입한다.</p>\n<p>과정은 아래와 같다.</p>\n<ol>\n<li>[선언]</li>\n<li>[TDZ]</li>\n<li>[초기화]</li>\n<li>[할당]</li>\n</ol>\n<p>초기화(변수가 메모리에 할당되며 undefined로 초기화되는 과정)가 되기 전에 변수에 접근하려 한다면 <strong>TDZ</strong>에 의해서 에러가 발생하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>위처럼 호이스팅 된 코드를 보면 변수에 접근하는 데 있어<br>\n기존 var 키워드는 선언과 초기화가 함께 되었으므로 접근하여도 정상적으로 undefined가 출력된다.<br>\n하지만 let/const 키워드는 선언만 호이스팅 되고 그것은 초기화 이전이므로 접근하려 한다면 TDZ에 의해서 에러가 발생하는 것이라고 볼 수 있다.</p>\n<p>여기까지 let/const의 관점에서의 Hoisting에 대해 포스팅해보았다.<br>\nlet/const를 사용하면서 조금 더 엄격한 자바스크립트를 작성할 수 있게 되었고 그로 인해 예기치 않은 오류를 작성하는 상황을 줄일 수 있게 된 것 같다.</p>\n<hr>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://poiemaweb.com/es6-block-scope\">let, const와 블록 레벨 스코프</a></li>\n<li><a href=\"https://medium.com/korbit-engineering/let%EA%B3%BC-const%EB%8A%94-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EB%90%A0%EA%B9%8C-72fcf2fac365\">let과 const는 호이스팅 될까?</a></li>\n</ul>","excerpt":"Javascript Hoisting에 대해 다시 살펴보던 도중, 예전에 공부할땐 var를 대상으로 공부했으니 깨닫지 못했는데 이번에 let, const…","frontmatter":{"title":"ES6, Hoisting으로 다시 보는 let, const","date":"2018-04-26","tags":["ES6","javascript"],"keywords":["Dev.White"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/js-let-cont-hoisting/","previous":{"fields":{"slug":"/netflix-autoskip/"},"frontmatter":{"title":"넷플릭스 정주행을 위한 인트로 자동 스킵 크롬 확장 프로그램 (Netflix AutoSkip)","tags":["netflix"],"published":true}},"next":{"fields":{"slug":"/js-script-position/"},"frontmatter":{"title":"HTML에서 script태그는 어디에 위치해야 할까?","tags":["javascript","html"],"published":true}}}}}