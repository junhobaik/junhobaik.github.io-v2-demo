{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/js-react-lifecycle/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.White","author":"Junho Baik"}},"markdownRemark":{"id":"7a5d536c-c77e-5b33-b23d-43572a6d764f","html":"<p><img src=\"https://velopert.com/wp-content/uploads/2016/03/Screenshot-from-2016-12-10-00-21-26-1.png\" alt=\"출처 : https://velopert.com/1130\"></p>\n<h2>- Mount</h2>\n<p>컴포넌트가 실행 될 때, 'Mount 된다' 라고 표현.</p>\n<p>컴포넌트가 시작되면 제일 초기의 작업은</p>\n<ol>\n<li>context, defaultProps, state 저장</li>\n<li>componentWillMount 메소드 호출</li>\n<li>render, 컴포넌트를 DOM에 그린다.</li>\n<li>componentDidMount 호출</li>\n</ol>\n<hr>\n<h2>- 기본적인 컴포넌트 생성 과정</h2>\n<h3>constructor</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>컴포넌트가 처음 만들어 질 때 <strong>가장 먼저</strong> 실행되는 메소드</p>\n<h3>componentWillMount</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>컴포넌트가 DOM 위에 만들어지기 전에 실행된다,</p>\n<ul>\n<li>\n<p>componentWillMount 중 주의할 점</p>\n<ul>\n<li>현재 Mount 진행 중이므로(DidMount 전이다), props나 state를 변경해서는 안된다.</li>\n<li>또한 render 단계에 진입하지 않았으므로 DOM에 접근 할 수 없다.</li>\n</ul>\n</li>\n</ul>\n<h3>componentDidMount</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>컴포넌트가 만들어지고 난 후 render를 거치고 실행되는 메소드.</p>\n<p>여기서 javascript framework 연동, setTimeout, setInterval 및 AJAX 처리를 한다.</p>\n<ul>\n<li>\n<p>componentDidMount 에서 주의할 점</p>\n<ul>\n<li>render가 되었으므로 DOM에 접근 할 수 있지만,\nstate를 바꾸면 안된다. setState메소드를 사용하면 render 메소드가 다시 실행되기 때문이다.\n방금 render를 마친 단계인데, 다시금 render가 실행되면 사용자에게 표시될때 깜박임 등을 유발 할 수 있게 된다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>- Props Update 에 따른 cycle</h2>\n<p>props가 업데이트 될 때의 사이클,</p>\n<p>업데이트 되기 전, 업데이트를 감지 우선 <strong>componentWillRecieveProps</strong> 메소드 호출.</p>\n<p>다음으로 <strong>shouldComponentUpdate, componentWillUpdate</strong>가 차례로 호출.</p>\n<p>업데이트(render)가 완료되면 componentDidUpdate가 실행된다.</p>\n<p>여기서 componentDidUpdate는 이미 업데이트 된 상태이다, 따라서 바뀌지 이전의 props에 대한 정보를 가지고 있다.</p>\n<p>메소드들의 첫번째 인자로 props에 대한 정보를 가지고 있다.</p>\n<ol>\n<li>componentWillRecieveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ol>\n<h3>componentWillRecieveProps</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentWillRecieveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>컴포넌트가 props를 새로 받았을 때 실행.</p>\n<p>prop에 따라 state 를 업데이트 해야 할 때 사용하면 유용하다.</p>\n<ul>\n<li>\n<p>componentWillRecieveProps 단계에서 주의 할 점</p>\n<ul>\n<li>setState를 할 때 추가적으로 렌더링 하지 않는다</li>\n</ul>\n</li>\n</ul>\n<h3>shouldComponentUpdate</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> nextProps <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>prop 또는 state가 변경되었을때, 다시 render를 할지 결정하는 메소드.</p>\n<p>return 값 boolean으로 결정된다.</p>\n<h3>componentWillUpdate</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>컴포넌트가 업데이트 되기 전에 실행.</p>\n<ul>\n<li>\n<p>주의사항</p>\n<ul>\n<li>setState 사용 시 무한 루프 발생</li>\n</ul>\n</li>\n</ul>\n<h3>componentDidUpdate</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>render를 마친 후 실행된다.</p>\n<p>변경되고 난 후 이므로 변경 전의 prop, state를 가지고 있다.</p>\n<hr>\n<h2>- State Update 에 따른 cycle</h2>\n<p>setState를 통해서 state가 업데이트 될 때의 과정.</p>\n<p>props update와 과정은 동일하나 componentWillRecieveProps 메소드는 호출되지 않는다.</p>\n<p>메소드들의 두번째 인자로 state에 대한 정보를 가지고 있다.</p>\n<ol>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ol>\n<hr>\n<h2>- Unmount</h2>\n<p>Unmount, 컴포넌트가 제거되는 것.</p>\n<ol>\n<li>componentWillUnmount</li>\n</ol>\n<h3>componentWillUnmount</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>컴포넌트가 DOM 에서 사라진 후 실행되는 메소드,</p>\n<p>연결해두었던 이벤트 리스너를 제거하는 등의 수행을 하게 된다.</p>\n<hr>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://velopert.com/1130\">https://velopert.com/1130</a></li>\n<li><a href=\"https://www.zerocho.com/category/React/post/579b5ec26958781500ed9955\">https://www.zerocho.com/category/React/post/579b5ec26958781500ed9955</a></li>\n</ul>","excerpt":"출처 : https://velopert.com/1130 - Mount 컴포넌트가 실행 될 때, 'Mount 된다' 라고 표현. 컴포넌트가 시작되면 제일 초기의 작업은 context, defaultProps, state…","frontmatter":{"title":"리액트 생명주기 (React LifeCycle)","date":"2017-06-20","tags":["javascript","react"],"keywords":["Dev.White"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/js-react-lifecycle/","previous":{"fields":{"slug":"/js-scope/"},"frontmatter":{"title":"자바스크립트의 스코프(Scope)","tags":["javascript"],"published":true}},"next":{"fields":{"slug":"/js-es6-const-let/"},"frontmatter":{"title":"자바스크립트 ES6 const, let","tags":["javascript","ES6"],"published":true}}}}}