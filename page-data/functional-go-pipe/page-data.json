{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/functional-go-pipe/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.White","author":"Junho Baik"}},"markdownRemark":{"id":"8a0b6c29-8b2e-5226-9d7c-5a286bb8b6c5","html":"<p>a, b, c.. 라는 함수가 있다고 가정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>위와 같이 함수가 중첩되고 연속된다면 가독성도 좋지않고 작성하는데도 어려움이 있다.\n함수들을 연속적으로 사용하는 함수, 함수들을 함축하는 함수인 go/pipe에 대해 알아보자</p>\n<h2>go</h2>\n<p>go 함수는 인자를 받아 결과를 바로 산출해내는 함수이다.\n첫번째 인자는 시작이 되는 <strong>값</strong>을 받고, 나머지는 <strong>함수</strong>를 받아 첫번째 인자가 두번째 함수로 가 결과를 만들고 그 결과가 또 세번째 함수로가 그 결과가 만들어지는 과정이 마지막까지 계속된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">go</span><span class=\"token punctuation\">(</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  a <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  console<span class=\"token punctuation\">.</span>log\n<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>위와 같이 함수를 실행했을 때 기대값은 10이며 마지막 함수(console.log)가 실행되면서 10이 출력되는 것을 기대할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>func</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  func<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousFunc<span class=\"token punctuation\">,</span> curretFunc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">curretFunc</span><span class=\"token punctuation\">(</span>previousFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>간단히 나타내면 위와 같다.</p>\n<h2>pipe</h2>\n<p>pipe 함수는 <strong>함수를 리턴하는 함수</strong>로 인자로 함수들을 받아 그 함수들을 합성해 하나의 함수를 리턴한다. go와는 반환하는 것이 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수를 리턴하는 함수</span>\n\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>위와 같은 코드 구성이 될 것이며 <code class=\"language-text\">p</code>에는 합성된 함수가, 그리고 그 <code class=\"language-text\">p</code>를 실행한 <code class=\"language-text\">p(0)</code>의 출력은 10이 나올 것으로 기대할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">argument</span> <span class=\"token operator\">=></span> funcs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>pipe 함수를 작성하는 과정을 쪼개보면 아래와 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// pipe 함수는 인자로 함수들을 받는다.</span>\n\n<span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 함수를 리턴하게 될 것이다.</span>\n\n<span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">argument</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 여기서 argument는 pipe 함수가 실행되어 함축된 함수, 그 함수의 매개 변수이다.</span>\n\n<span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">argument</span> <span class=\"token operator\">=></span> funcs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 함수들을 함축해야 하므로 pipe의 인자로 들어온 함수들에 reduce를 사용한다.</span>\n<span class=\"token comment\">// reduce의 시작으로 함축된 함수의 매개변수인 argument를 전달해준다. (argument: 값)</span>\n\n<span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">argument</span> <span class=\"token operator\">=></span> funcs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 이제 위와 같이 reduce의 첫번째 인자를 채워준다.</span>\n<span class=\"token comment\">// 처음 reduce가 실행될 때는 acc가 pipe 함수의 실행 결과인 함수의 인자 **값**이 들어간다.</span>\n<span class=\"token comment\">// 다음부터는 그 함수의 실행 결과 값이 acc가 되어 누산되는 과정이 된다.</span></code></pre>\n      </div>\n<p>작성한 pipe 코드에서 마지막 reduce의 동작은 go와 거의 같기 때문에 아래와 같이 작성해도 같은 코드라 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">argument</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>funcs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>go의 경우에도 pipe 코드를 활용하여 작성 할 수 있다.\n결국 pipe를 실행해 함축된 함수를 실행하면 go를 한 동작과 거의 동일하기 때문이다.\n물론 위의 pipe에 go를 활용한 코드와 함께 사용은 불가하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>argument<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>funcs<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fns<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>funcs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 또는 return pipe.apply(null, funcs)(argument);</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<hr>\n<p>References</p>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/functional-es6\">inflearn | 함수형 프로그래밍과 JavaScript ES6+</a></li>\n</ul>","excerpt":"a, b, c.. 라는 함수가 있다고 가정하자. 위와 같이 함수가 중첩되고 연속된다면 가독성도 좋지않고 작성하는데도 어려움이 있다.\n함수들을 연속적으로 사용하는 함수, 함수들을 함축하는 함수인 go/pipe에 대해 알아보자 go go…","frontmatter":{"title":"JavaScript 함수형 프로그래밍, go / pipe","date":"2019-07-12","tags":["javascript"],"keywords":["go pipe","함수형 프로그래밍","자바스크립트 함수형 프로그래밍","자바스크립트 go","자바스크립트 pipe","자바스크립트 go pipe","javascript go","javascript pipe","javascript go pipe"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/functional-go-pipe/","previous":{"fields":{"slug":"/iterable-protocol/"},"frontmatter":{"title":"이터러블 프로토콜, 이터러블/이터레이터","tags":["ES6","javascript"],"published":true}},"next":{"fields":{"slug":"/my-mac-apps/"},"frontmatter":{"title":"사용중인 mac App 목록 및 앱 추천","tags":["mac"],"published":true}}}}}