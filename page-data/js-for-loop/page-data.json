{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/js-for-loop/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.White","author":"Junho Baik"}},"markdownRemark":{"id":"7e881d9d-759a-5e33-9c15-0e2e5fa0a8ff","html":"<h2>Javascript 'For Loop'</h2>\n<p>자바스크립트에서 사용하는 for 반복문의 유형에 대해 알아보자.</p>\n<ul>\n<li>\n<p>for</p>\n<ul>\n<li><code class=\"language-text\">for ([initialization]; [condition]; [final-expression])</code></li>\n</ul>\n</li>\n<li>\n<p>for in</p>\n<ul>\n<li><code class=\"language-text\">for (variable in [object | array])</code></li>\n</ul>\n</li>\n<li>\n<p>for of (ES6)</p>\n<ul>\n<li><code class=\"language-text\">for (variable of object)</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>- for</h3>\n<p><code class=\"language-text\">for ([initialization]; [condition]; [final-expression])</code></p>\n<h3>- for in</h3>\n<p><code class=\"language-text\">for (variable in [object | array])</code></p>\n<ul>\n<li>variable</li>\n<li>object 일때 variable = object의 다음 속성 이름</li>\n<li>array 일때 variable = array의 다음 요소 인덱스</li>\n</ul>\n<h3>- for of (ES6)</h3>\n<p><code class=\"language-text\">for (variable of object)</code></p>\n<ul>\n<li>variable</li>\n<li>object의 임의 속성 <strong>값</strong>일 수 있는 변수입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**************************************/</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// \"\"</span>\n<span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// NaN</span>\n<span class=\"token comment\">// null</span>\n\n\n<span class=\"token comment\">/**************************************/</span>\n\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index:\"</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">\" / arr[index]:\"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// index:0 / arr[index]:1</span>\n<span class=\"token comment\">// index:1 / arr[index]:\"\"</span>\n<span class=\"token comment\">// index:2 / arr[index]:undefined</span>\n<span class=\"token comment\">// index:3 / arr[index]:NaN</span>\n<span class=\"token comment\">// index:4 / arr[index]:null</span>\n\n\n<span class=\"token comment\">/**************************************/</span>\n\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// \"\"</span>\n<span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// NaN</span>\n<span class=\"token comment\">// null</span></code></pre>\n      </div>\n<h3>for of / for in 의 차이점</h3>\n<p>배열일 경우 배열 전체를 순회하는 반복문인 것은 같지만 차이점이 있다.</p>\n<p>여기서 ES6에서 새로 나온 for of 의 장점을 발견 할 수 있다.</p>\n<p>아래 코드를 살펴보면 Array의 prototype에 foo라는 새로운 메소드를 정의해놓았다.\n그런데 arr를 for in문을 통해서 콘솔 출력한 결과 foo라는 메소드까지 같이 출력되는 것을 볼 수 있다.\n하지만 for of는 그렇지 않다, 온전히 자신의 것만 출력할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index:\"</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">\" / arr[index]:\"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// index:0 / arr[index]:1</span>\n<span class=\"token comment\">// index:1 / arr[index]:\"\"</span>\n<span class=\"token comment\">// index:2 / arr[index]:undefined</span>\n<span class=\"token comment\">// index:3 / arr[index]:NaN</span>\n<span class=\"token comment\">// index:4 / arr[index]:null</span>\n<span class=\"token comment\">// index:foo / arr[index]:function () {}</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// \"\"</span>\n<span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// NaN</span>\n<span class=\"token comment\">// null</span></code></pre>\n      </div>","excerpt":"Javascript 'For Loop' 자바스크립트에서 사용하는 for 반복문의 유형에 대해 알아보자. for  for in  for of (ES6)  - for  - for in  variable object 일때 variable = object…","frontmatter":{"title":"자바스크립트 for문들의 유형과 차이점","date":"2017-06-29","tags":["javascript"],"keywords":["Dev.White"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/js-for-loop/","previous":{"fields":{"slug":"/js-es6-string-methods/"},"frontmatter":{"title":"자바스크립트 ES6 String Methods","tags":["javascript","ES6"],"published":true}},"next":{"fields":{"slug":"/js-es6-spread-operator/"},"frontmatter":{"title":"자바스크립트 ES6 Spread operator, 펼침 연산자","tags":["javascript","ES6"],"published":true}}}}}