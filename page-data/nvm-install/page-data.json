{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/nvm-install/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.White","author":"Junho Baik"}},"markdownRemark":{"id":"9ea91025-f4c0-527d-8359-a769c663cf98","html":"<p><em>해당 포스트는 macOS 환경을 기준으로 작성되었습니다</em></p>\n<p><a href=\"https://github.com/nvm-sh/nvm\"><strong>NVM</strong>(Node Version Manager)</a></p>\n<p>Node 버전을 쉽게 관리 할 수 있다.\n예로 사용하던 패키지가 Node 버전이 업데이트를 함에 따라 호환이 되지 않을 경우가 생길 때 NVM없이 Node 버전을 되돌리기는 간단한 작업은 아니다. 이런 경우 NVM이 요긴하게 사용될 것이고 이 외에도 팀규모의 개발 등 많은 곳에서 Node 버전 관리가 필요할 수 있다.</p>\n<h2>설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span></code></pre>\n      </div>\n<blockquote>\n<p><a href=\"https://github.com/nvm-sh/nvm#installation-and-update\">NVM | Installation</a></p>\n</blockquote>\n<h2>사용</h2>\n<p>현재 사용 가능한 Node Version List를 보여준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> nvm ls-remote</code></pre>\n      </div>\n<p>특정 버전의 Node를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> nvm <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span></code></pre>\n      </div>\n<p>또는 LTS Version으로 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> nvm <span class=\"token function\">install</span> --lts</code></pre>\n      </div>\n<p>사용할 Node 버전 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> nvm use <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span></code></pre>\n      </div>\n<blockquote>\n<p>처음 설치한 Node 버전은 자동으로 사용하게 설정이 되어있습니다.</p>\n</blockquote>\n<p>이렇게 간단하게 버전을 설치하고 사용을 설정하면 됩니다.\n설치된 리스트를 확인해보면 아래와 유사한 출력을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> nvm list\n       \n       v10.16.0\n-<span class=\"token operator\">></span>     v10.16.2\ndefault -<span class=\"token operator\">></span> lts/* <span class=\"token punctuation\">(</span>-<span class=\"token operator\">></span> v10.16.2<span class=\"token punctuation\">)</span>\nnode -<span class=\"token operator\">></span> stable <span class=\"token punctuation\">(</span>-<span class=\"token operator\">></span> v10.16.2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>\nstable -<span class=\"token operator\">></span> <span class=\"token number\">10.16</span> <span class=\"token punctuation\">(</span>-<span class=\"token operator\">></span> v10.16.2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>\niojs -<span class=\"token operator\">></span> N/A <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>\nunstable -<span class=\"token operator\">></span> N/A <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>\nlts/* -<span class=\"token operator\">></span> lts/dubnium <span class=\"token punctuation\">(</span>-<span class=\"token operator\">></span> v10.16.2<span class=\"token punctuation\">)</span>\nlts/argon -<span class=\"token operator\">></span> v4.9.1 <span class=\"token punctuation\">(</span>-<span class=\"token operator\">></span> N/A<span class=\"token punctuation\">)</span>\nlts/boron -<span class=\"token operator\">></span> v6.17.1 <span class=\"token punctuation\">(</span>-<span class=\"token operator\">></span> N/A<span class=\"token punctuation\">)</span>\nlts/carbon -<span class=\"token operator\">></span> v8.16.0 <span class=\"token punctuation\">(</span>-<span class=\"token operator\">></span> N/A<span class=\"token punctuation\">)</span>\nlts/dubnium -<span class=\"token operator\">></span> v10.16.2</code></pre>\n      </div>\n<p>설치되어있는 버전은 <code class=\"language-text\">10.16.0</code>과 <code class=\"language-text\">10.16.2</code>가 있고,\n현재 사용중인 버전이 <code class=\"language-text\">10.16.2</code>인 것을 확인 할 수 있습니다.</p>\n<p>만약 여기서 새로운 최신 LTS 버전의 Node가 나왔고 사용하자고 한다면 두가지 경우가 있을 것입니다.</p>\n<ol>\n<li>새 LTS 버전을 설치하고 새로운 환경(설치된 패키지가 없는 깨끗한 상태)에서 사용을 시작하겠다.</li>\n<li>새 LTS 버전을 설치하지만 기존에 사용하던 패키지는 그대로 가져가서 새로운 버전에 기존의 환경을 유지하고 싶다.</li>\n</ol>\n<p>1번의 경우에는 간단하게 버전을 설치하고 설치한 버전을 사용하기로 설정하면 됩니다.\n2번의 경우는 새 버전을 설치하고 기존의 패키지를 가져오는 과정이 필요합니다.\n아래서 설명하겠습니다.</p>\n<h2>사용하던 Node Version을 업데이트하기</h2>\n<p>이 경우는 새로운 버전으로 업데이트하지만 기존의 패키지는 가져옵니다.\n사용하던 환경(패키지) 그대로 사용하면서 버전만 업데이트하고 싶은 경우입니다.</p>\n<p>그때 사용하는 명령은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> nvm <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span> --reinstall-packages-from<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span></code></pre>\n      </div>\n<p>예를 들면 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> nvm <span class=\"token function\">install</span> <span class=\"token number\">11.11</span>.1 --reinstall-packages-from<span class=\"token operator\">=</span><span class=\"token number\">10.16</span>.2</code></pre>\n      </div>\n<p>위 명령어를 통해 새로운 <code class=\"language-text\">11.11.1</code> 버전을 설치하고 기존에 사용하던 버전 <code class=\"language-text\">10.16.2</code>의 패키지를 설치할 Node 버전(<code class=\"language-text\">11.11.1</code>)에 reinstall하는 과정을 거치게 됩니다.</p>\n<hr>\n<p>References</p>\n<ul>\n<li><a href=\"https://github.com/nvm-sh/nvm\">github | nvm-sh/nvm</a></li>\n</ul>","excerpt":"해당 포스트는 macOS 환경을 기준으로 작성되었습니다 NVM(Node Version Manager) Node 버전을 쉽게 관리 할 수 있다.\n예로 사용하던 패키지가 Node 버전이 업데이트를 함에 따라 호환이 되지 않을 경우가 생길 때 NVM…","frontmatter":{"title":"NVM, Node 설치 및 관리하기","date":"2019-08-08","tags":["node","javascript"],"keywords":["node 설치","nvm 설치","nvm 사용법","nvm update","nvm 업데이트"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nvm-install/","previous":{"fields":{"slug":"/mongodb-basic-crud/"},"frontmatter":{"title":"MongoDB 기초, CRUD 명령어","tags":["mongodb"],"published":true}},"next":{"fields":{"slug":"/css-bem/"},"frontmatter":{"title":"CSS 방법론 - BEM","tags":["css"],"published":true}}}}}